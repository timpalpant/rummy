// Code generated by protoc-gen-go.
// source: game.proto
// DO NOT EDIT!

/*
Package rummy is a generated protocol buffer package.

It is generated from these files:
	game.proto
	service.proto

It has these top-level messages:
	PlayerState
	GameState
	GameEvent
	CreateGameRequest
	CreateGameResponse
	JoinGameRequest
	JoinGameResponse
	StartGameRequest
	StartGameResponse
	GetGameStateRequest
	GetHandCardsRequest
	GetHandCardsResponse
	SubscribeGameRequest
	PickUpStockRequest
	PickUpStockResponse
	PickUpDiscardRequest
	PickUpDiscardResponse
	PlayCardsRequest
	PlayCardsResponse
	DiscardCardRequest
	DiscardCardResponse
	CallRummyRequest
	CallRummyResponse
*/
package rummy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import deck "rummy/deck"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GameState_TurnState int32

const (
	GameState_TURN_START      GameState_TurnState = 0
	GameState_PICKED_UP_CARDS GameState_TurnState = 1
	GameState_PLAYED_CARDS    GameState_TurnState = 2
)

var GameState_TurnState_name = map[int32]string{
	0: "TURN_START",
	1: "PICKED_UP_CARDS",
	2: "PLAYED_CARDS",
}
var GameState_TurnState_value = map[string]int32{
	"TURN_START":      0,
	"PICKED_UP_CARDS": 1,
	"PLAYED_CARDS":    2,
}

func (x GameState_TurnState) String() string {
	return proto.EnumName(GameState_TurnState_name, int32(x))
}
func (GameState_TurnState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type GameEvent_Type int32

const (
	GameEvent_UNKNOWN_TYPE    GameEvent_Type = 0
	GameEvent_TURN_START      GameEvent_Type = 1
	GameEvent_PICK_UP_STOCK   GameEvent_Type = 2
	GameEvent_PICK_UP_DISCARD GameEvent_Type = 3
	GameEvent_PLAY_CARDS      GameEvent_Type = 4
	GameEvent_DISCARD         GameEvent_Type = 5
	GameEvent_GAME_OVER       GameEvent_Type = 6
)

var GameEvent_Type_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "TURN_START",
	2: "PICK_UP_STOCK",
	3: "PICK_UP_DISCARD",
	4: "PLAY_CARDS",
	5: "DISCARD",
	6: "GAME_OVER",
}
var GameEvent_Type_value = map[string]int32{
	"UNKNOWN_TYPE":    0,
	"TURN_START":      1,
	"PICK_UP_STOCK":   2,
	"PICK_UP_DISCARD": 3,
	"PLAY_CARDS":      4,
	"DISCARD":         5,
	"GAME_OVER":       6,
}

func (x GameEvent_Type) String() string {
	return proto.EnumName(GameEvent_Type_name, int32(x))
}
func (GameEvent_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type PlayerState struct {
	Id             int32        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name           string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PlayedCards    []*deck.Card `protobuf:"bytes,3,rep,name=played_cards,json=playedCards" json:"played_cards,omitempty"`
	NumCardsInHand int32        `protobuf:"varint,4,opt,name=num_cards_in_hand,json=numCardsInHand" json:"num_cards_in_hand,omitempty"`
	CurrentScore   int32        `protobuf:"varint,5,opt,name=current_score,json=currentScore" json:"current_score,omitempty"`
}

func (m *PlayerState) Reset()                    { *m = PlayerState{} }
func (m *PlayerState) String() string            { return proto.CompactTextString(m) }
func (*PlayerState) ProtoMessage()               {}
func (*PlayerState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlayerState) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerState) GetPlayedCards() []*deck.Card {
	if m != nil {
		return m.PlayedCards
	}
	return nil
}

func (m *PlayerState) GetNumCardsInHand() int32 {
	if m != nil {
		return m.NumCardsInHand
	}
	return 0
}

func (m *PlayerState) GetCurrentScore() int32 {
	if m != nil {
		return m.CurrentScore
	}
	return 0
}

type GameState struct {
	NumCardsInStock   int32               `protobuf:"varint,1,opt,name=num_cards_in_stock,json=numCardsInStock" json:"num_cards_in_stock,omitempty"`
	DiscardPile       []*deck.Card        `protobuf:"bytes,2,rep,name=discard_pile,json=discardPile" json:"discard_pile,omitempty"`
	Players           []*PlayerState      `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	CurrentPlayerTurn int32               `protobuf:"varint,4,opt,name=current_player_turn,json=currentPlayerTurn" json:"current_player_turn,omitempty"`
	TurnState         GameState_TurnState `protobuf:"varint,5,opt,name=turn_state,json=turnState,enum=rummy.GameState_TurnState" json:"turn_state,omitempty"`
	GameOver          bool                `protobuf:"varint,6,opt,name=game_over,json=gameOver" json:"game_over,omitempty"`
}

func (m *GameState) Reset()                    { *m = GameState{} }
func (m *GameState) String() string            { return proto.CompactTextString(m) }
func (*GameState) ProtoMessage()               {}
func (*GameState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GameState) GetNumCardsInStock() int32 {
	if m != nil {
		return m.NumCardsInStock
	}
	return 0
}

func (m *GameState) GetDiscardPile() []*deck.Card {
	if m != nil {
		return m.DiscardPile
	}
	return nil
}

func (m *GameState) GetPlayers() []*PlayerState {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameState) GetCurrentPlayerTurn() int32 {
	if m != nil {
		return m.CurrentPlayerTurn
	}
	return 0
}

func (m *GameState) GetTurnState() GameState_TurnState {
	if m != nil {
		return m.TurnState
	}
	return GameState_TURN_START
}

func (m *GameState) GetGameOver() bool {
	if m != nil {
		return m.GameOver
	}
	return false
}

type GameEvent struct {
	PlayerId int32          `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Type     GameEvent_Type `protobuf:"varint,2,opt,name=type,enum=rummy.GameEvent_Type" json:"type,omitempty"`
	Cards    []*deck.Card   `protobuf:"bytes,3,rep,name=cards" json:"cards,omitempty"`
	Score    int32          `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
}

func (m *GameEvent) Reset()                    { *m = GameEvent{} }
func (m *GameEvent) String() string            { return proto.CompactTextString(m) }
func (*GameEvent) ProtoMessage()               {}
func (*GameEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GameEvent) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameEvent) GetType() GameEvent_Type {
	if m != nil {
		return m.Type
	}
	return GameEvent_UNKNOWN_TYPE
}

func (m *GameEvent) GetCards() []*deck.Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *GameEvent) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*PlayerState)(nil), "rummy.PlayerState")
	proto.RegisterType((*GameState)(nil), "rummy.GameState")
	proto.RegisterType((*GameEvent)(nil), "rummy.GameEvent")
	proto.RegisterEnum("rummy.GameState_TurnState", GameState_TurnState_name, GameState_TurnState_value)
	proto.RegisterEnum("rummy.GameEvent_Type", GameEvent_Type_name, GameEvent_Type_value)
}

func init() { proto.RegisterFile("game.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xc7, 0xb7, 0x5d, 0xca, 0xd2, 0xc3, 0xc7, 0x96, 0xb3, 0x6e, 0xd2, 0xac, 0x37, 0x04, 0x6f,
	0xd8, 0xa8, 0x35, 0xc1, 0x2b, 0x2f, 0x11, 0x9a, 0x95, 0xa0, 0xd0, 0xb4, 0x45, 0xb3, 0x57, 0x93,
	0x4a, 0x27, 0xda, 0x2c, 0x2d, 0x64, 0xda, 0x92, 0x90, 0xf8, 0x02, 0xbe, 0x8d, 0xaf, 0xe4, 0x9b,
	0x98, 0x33, 0xd3, 0xe2, 0xaa, 0xf1, 0x06, 0x86, 0xff, 0xf9, 0x9f, 0x8f, 0xdf, 0x99, 0x01, 0xe0,
	0x4b, 0x94, 0x72, 0x67, 0x2f, 0x76, 0xc5, 0x0e, 0x0d, 0x51, 0xa6, 0xe9, 0xf1, 0xe6, 0x5a, 0x7e,
	0xbd, 0x8a, 0xf9, 0xe6, 0x41, 0x7e, 0xa8, 0xe8, 0xf0, 0x87, 0x06, 0x6d, 0x6f, 0x1b, 0x1d, 0xb9,
	0x08, 0x8a, 0xa8, 0xe0, 0xd8, 0x03, 0x3d, 0x89, 0x6d, 0x6d, 0xa0, 0x8d, 0x0c, 0x5f, 0x4f, 0x62,
	0x44, 0x68, 0x64, 0x51, 0xca, 0x6d, 0x7d, 0xa0, 0x8d, 0x4c, 0x5f, 0x9e, 0xf1, 0x25, 0x74, 0xf6,
	0x94, 0x12, 0xb3, 0x4d, 0x24, 0xe2, 0xdc, 0x3e, 0x1f, 0x9c, 0x8f, 0xda, 0x63, 0x70, 0x64, 0xd9,
	0x69, 0x24, 0x62, 0xbf, 0xad, 0xe2, 0x74, 0xce, 0xf1, 0x16, 0xfa, 0x59, 0x99, 0x2a, 0x2f, 0x4b,
	0x32, 0xf6, 0x35, 0xca, 0x62, 0xbb, 0x21, 0x3b, 0xf4, 0xb2, 0x32, 0x95, 0xa6, 0x79, 0xf6, 0x2e,
	0xca, 0x62, 0x7c, 0x06, 0xdd, 0x4d, 0x29, 0x04, 0xcf, 0x0a, 0x96, 0x6f, 0x76, 0x82, 0xdb, 0x86,
	0xb4, 0x75, 0x2a, 0x31, 0x20, 0x6d, 0xf8, 0x53, 0x07, 0xf3, 0x2e, 0x4a, 0xb9, 0x1a, 0xf8, 0x39,
	0xe0, 0x1f, 0xd5, 0xf3, 0x62, 0xb7, 0x79, 0xa8, 0x00, 0x2e, 0x7f, 0x97, 0x0f, 0x48, 0xa6, 0xc9,
	0xe3, 0x24, 0x27, 0x2f, 0xdb, 0x27, 0x5b, 0xa2, 0xfa, 0x67, 0xf2, 0x2a, 0xee, 0x25, 0x5b, 0x8e,
	0x2f, 0xe0, 0x42, 0x82, 0x88, 0x9a, 0x11, 0x1d, 0xb9, 0x45, 0xe7, 0xd1, 0xc6, 0xfc, 0xda, 0x82,
	0x0e, 0x5c, 0xd5, 0xc3, 0x2b, 0x89, 0x15, 0xa5, 0xc8, 0x2a, 0xd2, 0x7e, 0x15, 0x52, 0x99, 0x61,
	0x29, 0x32, 0x7c, 0x03, 0x40, 0x06, 0x96, 0x53, 0x19, 0x49, 0xda, 0x1b, 0xdf, 0x54, 0x0d, 0x4e,
	0x7c, 0x0e, 0x59, 0x55, 0x23, 0xb3, 0xa8, 0x8f, 0xf8, 0x14, 0x4c, 0xba, 0x61, 0xb6, 0x3b, 0x70,
	0x61, 0x37, 0x07, 0xda, 0xa8, 0xe5, 0xb7, 0x48, 0x58, 0x1d, 0xb8, 0x18, 0xbe, 0x05, 0xf3, 0x94,
	0x84, 0x3d, 0x80, 0x70, 0xed, 0x2f, 0x59, 0x10, 0x4e, 0xfc, 0xd0, 0x3a, 0xc3, 0x2b, 0xb8, 0xf4,
	0xe6, 0xd3, 0x85, 0x3b, 0x63, 0x6b, 0x8f, 0x4d, 0x27, 0xfe, 0x2c, 0xb0, 0x34, 0xb4, 0xa0, 0xe3,
	0xbd, 0x9f, 0xdc, 0xbb, 0xb3, 0x4a, 0xd1, 0x87, 0xdf, 0xab, 0x1d, 0xbb, 0x07, 0x9e, 0x15, 0xd4,
	0xae, 0x22, 0x3a, 0xbd, 0x8d, 0x96, 0x12, 0xe6, 0x31, 0xde, 0x42, 0xa3, 0x38, 0xee, 0xd5, 0x0b,
	0xe9, 0x8d, 0xaf, 0x1f, 0x01, 0xc8, 0x64, 0x27, 0x3c, 0xee, 0xb9, 0x2f, 0x2d, 0x38, 0x00, 0xe3,
	0x7f, 0x2f, 0x46, 0x05, 0xf0, 0x09, 0x18, 0xea, 0xe2, 0xd5, 0xd6, 0xd4, 0x8f, 0xe1, 0x37, 0x68,
	0x50, 0x15, 0x9a, 0x73, 0xbd, 0x5c, 0x2c, 0x57, 0x9f, 0x96, 0x2c, 0xbc, 0xf7, 0x5c, 0xeb, 0xec,
	0x2f, 0x3c, 0x0d, 0xfb, 0xd0, 0x25, 0x3c, 0x82, 0x0b, 0xc2, 0xd5, 0x74, 0x61, 0xe9, 0x35, 0x31,
	0x49, 0xb3, 0x79, 0x40, 0x80, 0xd6, 0x39, 0xe5, 0x11, 0x71, 0xc5, 0xdb, 0xc0, 0x36, 0x5c, 0xd4,
	0x41, 0x03, 0xbb, 0x60, 0xde, 0x4d, 0x3e, 0xb8, 0x6c, 0xf5, 0xd1, 0xf5, 0xad, 0xe6, 0xe7, 0xa6,
	0xfc, 0xa7, 0xbc, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xa8, 0xe4, 0xfa, 0x55, 0x03, 0x00,
	0x00,
}
